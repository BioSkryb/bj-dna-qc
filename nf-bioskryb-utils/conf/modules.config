process {
      
    withName: 'PUBLISH_INPUT_DATASET' {
        container = {
            params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:ubuntu-arm_22.04'
            : 'public.ecr.aws/v2u5x5f1/basejumper:ubuntu_18.04'
        }
        queue = { params.architecture == 'arm' ? 'small-arm-spot' : 'small-spot' }
        cpus        = { check_max( 2, 'cpus' ) }
        memory      = { check_max( 3.GB, 'memory' ) }
        time        = { check_max( 1.h, 'time' ) }
        resourceLabels {
            pipeline_user = params.pipeline_user
            basejumper_organization_name = params.basejumper_organization_name
            basejumper_workspace_name = params.basejumper_workspace_name
            basejumper_project_name = params.basejumper_project_name
            pipeline_name = params.pipeline_name
            basejumper_organization_uuid = params.basejumper_organization_uuid
            basejumper_workspace_uuid = params.basejumper_workspace_uuid
            basejumper_project_uuid = params.basejumper_project_uuid
            basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
            pipeline_process_name = "PUBLISH_INPUT_DATASET"
            pipeline_biosample_count = params.pipeline_biosample_count
        }

    }

    withName: 'SEQTK_SAMPLE' {
            container   = "quay.io/biocontainers/seqtk:1.3--h5bf99c6_3"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 10.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SEQTK_SAMPLE"
                pipeline_biosample_count = params.pipeline_biosample_count
            } 
    }

    withName: 'MULTIQC' {
            queue       = { task.attempt > 1 ? 'large-ondemand' : 'small-ondemand' }
            container   = "quay.io/biocontainers/multiqc:1.21--pyhdfd78af_0"
            errorStrategy = { task.attempt <=2 ? 'retry' : 'terminate' }
            cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
            memory      = { check_max( 7.GB * task.attempt, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "MULTIQC"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
    }

    withName: 'REPORT_VERSIONS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ubuntu_18.04"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "REPORT_VERSIONS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
    }

    if (manifest.name == 'BJ-DNA-QC' || manifest.name == 'BJ-Expression') {
        withName: 'CUSTOM_FASTQ_MERGE' {
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:ubuntu-arm_22.04'
                : 'public.ecr.aws/v2u5x5f1/basejumper:ubuntu_18.04'
            }
            queue = { params.architecture == 'arm' ? 'small-arm-spot' : 'small-spot' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 2.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_FASTQ_MERGE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'FASTP' {
            container   = "quay.io/biocontainers/fastp:0.20.1--h8b12597_0"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
            memory      = { check_max( 7.GB * task.attempt, 'memory' ) }
            time        = { check_max( 2.h * task.attempt, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "FASTP"
                pipeline_biosample_count = params.pipeline_biosample_count
            }    
        }

    }

    if (manifest.name == 'BJ-DNA-QC' || manifest.name == 'BJ-WES' || manifest.name == 'BJ-WGS') {
        withName: 'CUSTOM_DATA_PROCESSING' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_bj-dna-qc_1.3.1"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_DATA_PROCESSING"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'CUSTOM_REPORT' {
            queue       = { task.attempt > 1 ? 'large-spot' : 'small-spot' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_bj-dna-qc_1.3.1"
            cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
            memory      = { check_max( 7.GB * task.attempt, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_REPORT"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'SENTIEON_DRIVER_METRICS' {
            queue = { params.architecture == 'arm' ? 'small-arm-spot' : 'small-spot' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_DRIVER_METRICS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
    }

    if (manifest.name == 'BJ-DNA-QC') {
    
        withName: 'KRAKEN2' {
            container   = "quay.io/biocontainers/kraken2:2.1.3--pl5321hdcf5f25_0"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "KRAKEN2"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'FASTQC' {
            container   = "quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "FASTQC"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'SENTIEON_BWA_MEM' {
            queue = { params.architecture == 'arm' ? 'large-arm-spot' : 'large-spot' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 8, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_BWA_MEM"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'SENTIEON_DRIVER_LOCUSCOLLECTOR' {
            queue = { params.architecture == 'arm' ? 'small-arm-spot' : 'small-spot' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 1.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_DRIVER_LOCUSCOLLECTOR"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'SENTIEON_DRIVER_DEDUP' {
            queue = { params.architecture == 'arm' ? 'large-arm-spot' : 'large-spot' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 8, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_DRIVER_DEDUP"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'BAM_LORENZ_COVERAGE' {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:bam_lorenz_coverage_v0"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 2.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "BAM_LORENZ_COVERAGE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'QUALIMAP_BAMQC' {
            container   = "quay.io/biocontainers/qualimap:2.2.2d--1"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "QUALIMAP_BAMQC"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'PRESEQ_BAM2MR' {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:preseq_bam2mr_0.1"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PRESEQ_BAM2MR"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'PRESEQ_GC_EXTRAP' {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:preseq_bam2mr_0.1"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PRESEQ_GC_EXTRAP"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'CUSTOM_CALCULATE_MAPD' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_bj-dna-qc_1.3.1"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_CALCULATE_MAPD"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: "BAM_TO_BED" {
            container   = "quay.io/biocontainers/bedtools:2.28.0--hdf88d34_0"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 2.h * task.attempt, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "BAM_TO_BED"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: "GINKGO_BINUNSORT" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginko_0.2"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "GINKGO_BINUNSORT"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: "GINKGO_SEGMENTATION_R" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginko_0.2"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "GINKGO_SEGMENTATION_R"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: "GINKGO_CNV_CALLER" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginko_0.2"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "GINKGO_CNV_CALLER"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: "GINKO_RDS_TO_FLAT" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginko_0.2"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "GINKO_RDS_TO_FLAT"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: "GINKO_PARSE_OUTPUTS" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginko_parser_0.1"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "GINKO_PARSE_OUTPUTS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        
        withName: "PARSE_RDS_CNV_METRICS" {
            container   = "public.ecr.aws/v2u5x5f1/basejumper:ginko_0.2"
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PARSE_RDS_CNV_METRICS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
    }
    
    if (manifest.name == 'BJ-WGS' || manifest.name == 'BJ-WES') {
        
        withName: 'BCFTOOLS_VIEW' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0'
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "BCFTOOLS_VIEW"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'SNPEFF_ANNOTATION' {
            queue       = { task.attempt <= 1 ? 'large-spot' : 'large-ondemand' }
            container   = "quay.io/biocontainers/snpeff:5.1--hdfd78af_2"
            cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
            memory      = { check_max( 31.GB * task.attempt, 'memory' ) }
            time        = { check_max( 5.h, 'time' ) }
            maxRetries  = 1
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SNPEFF_ANNOTATION"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
    
        // WES/WGS tasks
        
        withName: 'SENTIEON_ALIGNMENT' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            maxForks    = 8 
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_ALIGNMENT"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }  
        
        withName: 'SENTIEON_HAPLOTYPER' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_HAPLOTYPER"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }  
        
        withName: 'SENTIEON_DNASCOPE' {
            queue       = 'intense-spot'
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            container = 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 246.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_DNASCOPE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'SENTIEON_DRIVER_COVERAGEMETRICS' {
            queue = { params.architecture == 'arm' ? 'large-arm-spot' : 'large-spot' }
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            errorStrategy = { task.attempt <=1 ? 'retry' : 'ignore' }
            cpus            = { check_max( 2, 'cpus' ) }
            memory          = { check_max( 30.GB, 'memory' ) }
            time            = { check_max( 2.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_DRIVER_COVERAGEMETRICS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }  
        
        withName: 'SENTIEON_ALGORITHM' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            maxForks    = 8 
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_ALGORITHM"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'BCFTOOLS_QUERY_L' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container = "quay.io/biocontainers/bcftools:1.14--h88f3f91_0"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "BCFTOOLS_QUERY_L"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'VCFEVAL' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = 'quay.io/biocontainers/rtg-tools:3.12.1--hdfd78af_0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 30.GB, 'memory' ) }
            time        = { check_max( 2.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "VCFEVAL"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'ANNOT_VCF_WITH_VCFEVAL' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.18--h8b25389_0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 10.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "VCFEVAL"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'CONCAT_VCFEVAL_RESULTS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:ubuntu_18.04'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 10.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CONCAT_VCFEVAL_RESULTS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        // VCFEVAL tasks        
        withName: 'DETERMINE_EXPECTED_NEGATIVES' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:bedtools-v2.28.0_cv2'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 2.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "DETERMINE_EXPECTED_NEGATIVES"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'DETERMINE_TOTAL_NEGATIVES' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "DETERMINE_TOTAL_NEGATIVES"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'CREATE_VCFEVAL_OVERALL_METRICS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:r_ado_1.0'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CREATE_VCFEVAL_OVERALL_METRICS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'IDENTIFY_GERMLINE_HETS' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0'
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "IDENTIFY_GERMLINE_HETS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'EXTRACT_HET_SITES' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "EXTRACT_HET_SITES"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'SLICE_HET_INTERVALS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SLICE_HET_INTERVALS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'CREATE_ADO_TABLE' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:utility-lite-0.1.0'
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CREATE_ADO_TABLE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'SUMMARIZE_ADO_INTERVALS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:r_ado_1.2'
            cpus        = { check_max( 2, 'cpus' ) } 
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 8.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SUMMARIZE_ADO_INTERVALS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'CONCAT_SUMMARY_ADO_INTERVALS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:r_ado_1.2'
            cpus        = { check_max( 2, 'cpus' ) } 
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 8.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CONCAT_SUMMARY_ADO_INTERVALS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'PREPROCESS_VCF' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            errorStrategy   = 'ignore'
            queue = 'small-spot'
            cpus = { check_max( 2, 'cpus' ) }
            memory = { check_max( 7.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "FILTER_WILDTYPES"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }
    }

    if (manifest.name == 'BJ-WES') {
        withName: 'PICARD_COLLECTHSMETRICS' {
            container = "quay.io/biocontainers/picard:3.0.0--hdfd78af_0"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 8.GB, 'memory' ) }
            time = { check_max( 5.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PICARD_COLLECTHSMETRICS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
    }


    if (manifest.name == 'BJ-Expression') {
        withName: 'SALMONQUANT' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "quay.io/biocontainers/salmon:1.6.0--h84f40af_0"
            cpus        = { check_max( 8, 'cpus' ) }
            memory      = { check_max( 31.GB, 'memory' ) }
            time        = { check_max( 6.h * task.attempt, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SALMONQUANT"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'CREATE_TXIMPORT_SALMON_TX_GENE' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 2.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CREATE_TXIMPORT_SALMON_TX_GENE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'MERGE_TXIMPORT_SALMON_TX_GENE' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "MERGE_TXIMPORT_SALMON_TX_GENE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'CREATE_MATRIX_SALMON_TX_GENE' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CREATE_MATRIX_SALMON_TX_GENE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'STARALIGN' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "quay.io/biocontainers/star:2.7.6a--0"
            cpus        = { check_max( 16, 'cpus' ) }
            memory      = { check_max( 60.GB, 'memory' ) }
            time        = { check_max( 6.h * task.attempt, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "STARALIGN"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'QUALIMAP_BAMRNA' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = 'quay.io/biocontainers/qualimap:2.2.2d--1'
            cpus        = { check_max( 16, 'cpus' ) }
            memory      = { check_max( 60.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "QUALIMAP_BAMRNA"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'STARGETPRIM' {
            queue       = { task.attempt <= 1 ? 'small-spot' : 'large-ondemand' }
            container   = 'quay.io/biocontainers/samtools:1.10--h2e538c0_3'
            cpus        = { check_max( 2 * task.attempt, 'cpus' ) }
            memory      = { task.attempt <= 1 ? 7.GB : task.attempt == 2 ? 30.GB : 60.GB }
            time        = { check_max( 4.h * task.attempt, 'time' ) }

            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "STARGETPRIM"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'HTSEQ_COUNTS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/htseq:0.13.5--py38h803c66d_1'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 12.h * task.attempt, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "HTSEQ_COUNTS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'CREATE_HTSEQ_SUMMARY' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            errorStrategy   = 'ignore'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CREATE_HTSEQ_SUMMARY"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'MERGE_HTSEQ_SUMMARY' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "MERGE_HTSEQ_SUMMARY"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'CREATE_HTSEQ_MATRIX' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CREATE_HTSEQ_MATRIX"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'PLOTTER_PCAHEATMAP_HTSEQ_SUMMARY' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            errorStrategy   = 'ignore'
            container   = "public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10"
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PLOTTER_PCAHEATMAP_HTSEQ_SUMMARY"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'CELL_TYPING' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            errorStrategy   = 'ignore'
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:rnaseq_celltype_0.4'
            cpus        = { check_max( 16, 'cpus' ) }
            memory      = { check_max( 60.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CELL_TYPING"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'CREATE_QC_REPORT' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CREATE_QC_REPORT"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'GENE_BODY_COVERAGE_RNA' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:gene_body_coverage_0.2.1'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h * task.attempt, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "GENE_BODY_COVERAGE_RNA"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'GENE_BODY_COVERAGE_RNA_PLOT' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:gene_body_coverage_0.2.1'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "GENE_BODY_COVERAGE_RNA_PLOT"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'CREATE_MASTER_STATS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CREATE_MASTER_STATS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'ALEVIN_NOQUANT_DUMPFQ' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "quay.io/biocontainers/salmon:1.6.0--h84f40af_0"
            cpus        = { check_max( 8, 'cpus' ) }
            memory      = { check_max( 31.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "ALEVIN_NOQUANT_DUMPFQ"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'CUSTOM_AWK_DEMUX_CBC_FASTQ' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:ubuntu_18.04'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_AWK_DEMUX_CBC_FASTQ"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'CALC_DYNAMICRANGE' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:custom_r_nf_rnaseq_0.10'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CALC_DYNAMICRANGE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

    }
    
    if (manifest.name != 'BJ-DNA-QC' && manifest.name != 'BJ-Expression' && manifest.name != 'BJ-WGS' && manifest.name != 'BJ-WES') {
        // RNA Variant Calling modules  
        withName: 'SENTIEON_DRIVER_RNA_SPLIT_READS_JUNCTIONS' {
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            queue           = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus            = { check_max( 2, 'cpus' ) }
            memory          = { check_max( 7.GB, 'memory' ) }
            time            = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_DRIVER_RNA_SPLIT_READS_JUN"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'SENTIEON_DRIVER_BQSR' {
            errorStrategy = { task.attempt <=1 ? 'retry' : 'ignore' }
            queue           = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus            = { check_max( 2, 'cpus' ) }
            memory          = { check_max( 7.GB, 'memory' ) }
            time            = { check_max( 12.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_DRIVER_BQSR"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'SENTIEON_DRIVER_RNA_HAPLOTYPER_DNASCOPE' {
            errorStrategy = { task.attempt <=1 ? 'retry' : 'ignore' }
            queue           = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus            = { check_max( 2, 'cpus' ) }
            memory          = { check_max( 7.GB, 'memory' ) }
            time            = { check_max( 12.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_DRIVER_RNA_HAPLOTYPER_DNASC"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        //parabricks
        
        withName: 'PARABRICKS_HAPLOTYPER_GERMLINE' {
            errorStrategy   = 'ignore'
            queue = 'intense-gpu-spot'
            accelerator = 4
            cpus = { check_max( 48, 'cpus' ) }
            memory = { check_max( 180.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PARABRICKS_HAPLOTYPER_GERMLINE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
    
        withName: 'PARABRICKS_DEEPVARIANT_GERMLINE' {
            errorStrategy   = 'ignore'
            queue = 'intense-gpu-spot'
            accelerator = 4
            cpus = { check_max( 48, 'cpus' ) }
            memory = { check_max( 180.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PARABRICKS_DEEPVARIANT_GERMLINE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
            
        }
    
        withName: 'PARABRICKS_BAMMETRICS' {
            errorStrategy   = 'ignore'
            queue = 'intense-gpu-spot'
            accelerator = 4
            cpus = { check_max( 48, 'cpus' ) }
            memory = { check_max( 180.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PARABRICKS_BAMMETRICS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
    
        withName: 'PARABRICKS_COLLECTMULTIPLEMETRICS' {
            
            errorStrategy   = 'ignore'
            queue = 'intense-gpu-spot'
            accelerator = 4
            cpus = { check_max( 48, 'cpus' ) }
            memory = { check_max( 180.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PARABRICKS_COLLECTMULTIPLEMETRICS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }

        withName: 'MERGE_VCFS' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
            queue       = { task.attempt <= 1 ? 'large-spot' : 'large-ondemand' }
            cpus = { check_max( 4, 'cpus' ) }
            memory = { check_max( 15.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "MERGE_VCFS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }
       
        withName: 'VARIANTQC' {
            
            errorStrategy   = 'ignore'
            queue = 'large-spot'
            cpus = { check_max( 8, 'cpus' ) }
            memory = { check_max( 30.GB, 'memory' ) }
            time = { check_max( 5.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "VARIANTQC"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }
    

        withName: 'SPLIT_VCF_BY_CHR' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            errorStrategy   = 'ignore'
            queue = 'small-spot'
            cpus = { check_max( 2, 'cpus' ) }
            memory = { check_max( 7.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SPLIT_VCF_BY_CHR"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }

        
        withName: 'VARIANT_ANNOTATION_VEP' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            errorStrategy   = 'ignore'
            queue = 'small-spot'
            cpus = { check_max( 2, 'cpus' ) }
            memory = { check_max( 7.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "VARIANT_ANNOTATION"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }

        withName: 'CONCAT_VCFS' {
            
            container = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            errorStrategy   = 'ignore'
            queue = 'small-spot'
            cpus = { check_max( 2, 'cpus' ) }
            memory = { check_max( 7.GB, 'memory' ) }
            time = { check_max( 3.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CONCAT_VCFS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }

        withName: 'SET_PSEUDO_BULK' {
            container = "public.ecr.aws/v2u5x5f1/basejumper:somatic_variant_calling_0.1"
            queue = 'small-spot'
            cpus = { check_max( 1, 'cpus' ) }
            memory = { check_max( 3.GB, 'memory' ) }
            time = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SET_PSEUDO_BULK"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'CUSTOM_BAM_CONCATENATE_FILES' {
            container = "quay.io/biocontainers/samtools:1.15.1--h1170115_0"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 8.GB, 'memory' ) }
            time = { check_max( 5.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_BAM_CONCATENATE_FILES"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'CUSTOM_BAM_SUBSAMPLE' {
            container = "quay.io/biocontainers/samtools:1.15.1--h1170115_0"
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 8.GB, 'memory' ) }
            time = { check_max( 5.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_BAM_SUBSAMPLE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'BCFTOOLS_FILTER' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0'
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "BCFTOOLS_FILTER"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'BGZIP_TABIX_FILTERD_VCF' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:htslib_1.11_1.0.0"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "BGZIP_TABIX_FILTERD_VCF"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'BGZIP_TABIX' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container = "public.ecr.aws/v2u5x5f1/basejumper:htslib_1.11_1.0.0"
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "BGZIP_TABIX"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'BCFTOOLS_MERGE' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "BCFTOOLS_MERGE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'BGZIP_TABIX_MULTISAMPLE_VCF' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:htslib_1.11_1.0.0"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "BGZIP_TABIX_MULTISAMPLE_VCF"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'SNPSIFT_ANNOTATION' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "quay.io/biocontainers/snpsift:4.3.1t--hdfd78af_3"
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 10.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SNPSIFT_ANNOTATION"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'SNPSIFT_DBNSFP' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "quay.io/biocontainers/snpsift:4.3.1t--hdfd78af_3"
            cpus        = { check_max( 8, 'cpus' ) }
            memory      = { check_max( 30.GB, 'memory' ) }
            time        = { check_max( 5.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SNPSIFT_DBNSFP"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        
        withName: 'GATK_VARIANTSTOTABLE' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            container   = "broadinstitute/gatk:4.1.3.0"
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 15.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "GATK_VARIANTSTOTABLE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'CUSTOM_EXPANDED_FIELDS' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            container   = "public.ecr.aws/v2u5x5f1/basejumper:variantannotation_0.3"
            cpus        = { check_max( 16, 'cpus' ) }
            memory      = { check_max( 60.GB, 'memory' ) }
            time        = { check_max( (4 + task.attempt).h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_EXPANDED_FIELDS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'SPLIT_VCF_BY_SAMPLES' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'quay.io/biocontainers/bcftools:1.14--h88f3f91_0'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SPLIT_VCF_BY_SAMPLES"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'TMBler' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 5.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "TMBler"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
        
        withName: 'CUSTOM_COMBINE_METRICS' {
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            container   = 'public.ecr.aws/v2u5x5f1/basejumper:ubuntu_18.04'
            cpus        = { check_max( 1, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_COMBINE_METRICS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'ULTRAPLEX' {
            container   = "quay.io/biocontainers/ultraplex:1.2.5--py39hf95cd2a_2"
            queue       = 'intense-ondemand'
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            cpus        = { check_max( 16, 'cpus' ) }
            memory      = { check_max( 246.GB, 'memory' ) }
            time        = { check_max( 48.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "ULTRAPLEX"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'SENTIEON_DRIVER_TNSCOPE' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            maxForks    = 8
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_DRIVER_TNSCOPE"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'SENTIEON_DRIVER_TNSEQ' {
            queue = { params.architecture == 'arm' ? 'intense-arm-spot' : 'intense-spot' }
            errorStrategy   = { task.attempt <=1 ? 'retry' : 'ignore' }
            maxForks    = 8
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-arm-202308-01'
                : 'public.ecr.aws/v2u5x5f1/basejumper:sentieon-202308-01-1'
            }
            cpus        = { check_max( 64, 'cpus' ) }
            memory      = { check_max( 123.GB, 'memory' ) }
            time        = { check_max( 24.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SENTIEON_DRIVER_TNSEQ"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName:Manta {
            queue = 'large-ondemand'
            cpus = { check_max( 8, 'cpus' ) }
            memory = { check_max( 31.GB, 'memory' ) }
            time = { check_max( 18.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "Manta"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }
    
        withName:ExpansionHunter {
            queue = 'large-ondemand'
            cpus = { check_max( 8, 'cpus' ) }
            memory = { check_max( 31.GB, 'memory' ) }
            time = { check_max( 18.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "ExpansionHunter"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'PICARD_ADDORREPLACEREADGROUPS' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 8.GB, 'memory' ) }
            time = { check_max( 5.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PICARD_ADDORREPLACEREADGROUPS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        withName: 'BAMSURGEON_ADDSNV' {
            
            errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "BAMSURGEON_ADDSNV"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }

        withName: 'SIGPROFILERGENERATEMATRIX_MATRIX_GENERATOR' {
            
            errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "SIGPROFILERGENERATEMATRIX_MATRIX_GENERATOR"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }    

        
        withName: 'CUSTOM_MUTATIONCATALOG_MERGER' {
            
            errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
            queue       = { task.attempt <= 2 ? 'small-spot' : 'small-ondemand' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 7.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_MUTATIONCATALOG_MERGER"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }

        withName: 'CUSTOM_FASTQ_MERGE_DATASETS' {
            container = {
                params.architecture == 'arm' ? 'public.ecr.aws/v2u5x5f1/basejumper:ubuntu-arm_22.04'
                : 'public.ecr.aws/v2u5x5f1/basejumper:ubuntu_18.04'
            }
            queue = { params.architecture == 'arm' ? 'small-arm-spot' : 'small-spot' }
            errorStrategy = { task.attempt <= 1 ? 'retry' : 'ignore' }
            cpus        = { check_max( 2, 'cpus' ) }
            memory      = { check_max( 3.GB, 'memory' ) }
            time        = { check_max( 10.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_FASTQ_MERGE_DATASETS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }

        }

        withName: 'PETASUITE_DECOMPRESS' {
            queue       = { task.attempt <= 2 ? 'large-spot' : 'large-ondemand' }
            cpus        = { check_max( 4, 'cpus' ) }
            memory      = { check_max( 8.GB, 'memory' ) }
            time        = { check_max( 1.h, 'time' ) }
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "PETASUITE_DECOMPRESS"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

        //Local modules
        withName: 'CUSTOM_PIPELINE_JSON_OUTPUT' {
            resourceLabels {
                pipeline_user = params.pipeline_user
                basejumper_organization_name = params.basejumper_organization_name
                basejumper_workspace_name = params.basejumper_workspace_name
                basejumper_project_name = params.basejumper_project_name
                pipeline_name = params.pipeline_name
                basejumper_organization_uuid = params.basejumper_organization_uuid
                basejumper_workspace_uuid = params.basejumper_workspace_uuid
                basejumper_project_uuid = params.basejumper_project_uuid
                basejumper_pipeline_uuid = params.basejumper_pipeline_uuid
                pipeline_process_name = "CUSTOM_PIPELINE_JSON_OUTPUT"
                pipeline_biosample_count = params.pipeline_biosample_count
            }
        }

    }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
